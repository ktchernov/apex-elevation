apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
	compileSdkVersion 24
	buildToolsVersion "24.0.1"

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	defaultConfig {
		applicationId "io.github.ktchernov.simpleelevation"
		minSdkVersion 17
		targetSdkVersion 24
		versionCode 2
		versionName "1.1"
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

		vectorDrawables.useSupportLibrary = true

		if (properties.getProperty("googleElevationApiKey") == null) {
			// Follow the instructions here to get a free API key:
			// https://developers.google.com/maps/documentation/elevation/get-api-key
			throw new GradleException("Please specify a googleElevationApiKey in local.properties")
		}

		resValue "string", "googleElevationApiKey", properties.getProperty("googleElevationApiKey")
	}

	applicationVariants.all { variant ->
		variant.getOutputs().each { output ->
			def file = output.outputFile
			//noinspection GroovyAssignabilityCheck
			output.outputFile = new File(
					file.parent,
					file.name.replace(".apk", "-" + defaultConfig.versionName + "-" + defaultConfig
							.versionCode + ".apk"))
		}
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
		exclude group: 'com.android.support', module: 'support-annotations'
	})
	compile 'com.android.support:appcompat-v7:24.2.0'
	compile 'com.android.support:design:24.2.0'

	compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'

	compile 'com.github.ktchernov:Android-ReactiveLocation:-SNAPSHOT'

	compile 'com.google.android.gms:play-services-location:9.4.0'

	compile 'io.reactivex:rxjava:1.1.8'
	compile 'io.reactivex:rxandroid:1.2.1'

	compile 'com.jakewharton:butterknife:8.2.1'
	apt 'com.jakewharton:butterknife-compiler:8.2.1'

	def okHttpVersion = '3.4.1'
	compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"
	compile "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"

	def retrofitVersion = '2.1.0'
	compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
	compile "com.squareup.retrofit2:retrofit-mock:${retrofitVersion}"
	compile "com.squareup.retrofit2:converter-moshi:${retrofitVersion}"
	compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"

	compile 'com.jakewharton.timber:timber:4.1.2'

	apt 'com.google.dagger:dagger-compiler:2.5'
	compile 'com.google.dagger:dagger:2.5'
	provided 'javax.annotation:jsr250-api:1.0'

	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-all:1.10.19'
	testCompile 'com.google.truth:truth:0.28'
}

def propsFile = rootProject.file('keystore.properties')

if (propsFile.exists()) {
	def props = new Properties()
	props.load(new FileInputStream(propsFile))
	android {
		signingConfigs {
			release {
				storePassword props['keyPassword']
				keyPassword props['storePassword']
				keyAlias props['keyAlias']
				storeFile file(props['storeFile'])
			}
		}
		buildTypes {
			release {
				minifyEnabled true
				shrinkResources false
				useProguard true
				proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
				signingConfig signingConfigs.release
			}
		}
	}
}
