apply plugin: 'com.android.application'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
	compileSdkVersion 28
	buildToolsVersion "28.0.3"

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	defaultConfig {
		applicationId "io.github.ktchernov.simpleelevation"
		minSdkVersion 17
		targetSdkVersion 28
		versionCode 3
		versionName "1.2"
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

		vectorDrawables.useSupportLibrary = true

		if (properties.getProperty("googleElevationApiKey") == null) {
			// Follow the instructions here to get a free API key:
			// https://developers.google.com/maps/documentation/elevation/get-api-key
			throw new MissingResourceException("Please specify a googleElevationApiKey in local.properties")
		}

		resValue "string", "googleElevationApiKey", properties.getProperty("googleElevationApiKey")
	}

	applicationVariants.all { variant ->
		variant.outputs.all {
			def flavorName = variant.getFlavorName()
			def buildType = variant.variantData.variantConfiguration.buildType.name
			def versionName = variant.versionName
			def versionCode = variant.versionCode
			outputFileName = "ApexElevation-${flavorName}-${buildType}-${versionName}-${versionCode}.apk"
		}
	}
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])

	def supportLibVersion="28.0.0"
	implementation "com.android.support:support-v13:${supportLibVersion}"
	implementation "com.android.support:design:${supportLibVersion}"

	implementation 'com.android.support.constraint:constraint-layout:1.1.3'

	implementation 'com.github.ktchernov:Android-ReactiveLocation:v1.0'

	implementation 'com.google.android.gms:play-services-location:9.4.0'

	implementation 'io.reactivex:rxjava:1.1.9'
	implementation 'com.artemzin.rxjava:proguard-rules:1.1.9.0'
	implementation 'io.reactivex:rxandroid:1.2.1'

	implementation 'com.jakewharton:butterknife:9.0.0'
	annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0'

	def okHttpVersion = '3.12.1'
	implementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"
	implementation "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"

	def retrofitVersion = '2.5.0'
	implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
	implementation "com.squareup.retrofit2:retrofit-mock:${retrofitVersion}"
	implementation "com.squareup.retrofit2:converter-moshi:${retrofitVersion}"
	implementation "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"

	implementation 'com.jakewharton.timber:timber:4.7.1'

	annotationProcessor 'com.google.dagger:dagger-compiler:2.19'
	implementation 'com.google.dagger:dagger:2.19'
	compileOnly 'javax.annotation:jsr250-api:1.0'

	testImplementation 'junit:junit:4.12'
	testImplementation 'org.mockito:mockito-all:1.10.19'
	testImplementation 'com.google.truth:truth:0.42'
}

def propsFile = rootProject.file('keystore.properties')

if (propsFile.exists()) {
	def props = new Properties()
	props.load(new FileInputStream(propsFile))
	android {
		signingConfigs {
			release {
				storePassword props['keyPassword']
				keyPassword props['storePassword']
				keyAlias props['keyAlias']
				storeFile file(props['storeFile'])
			}
		}
		buildTypes {
			release {
				minifyEnabled true
				shrinkResources true
				useProguard true
				proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
				signingConfig signingConfigs.release
			}
		}
	}
}
